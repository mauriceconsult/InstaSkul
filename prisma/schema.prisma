generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id      String    @id @default(uuid())
  name    String    @unique
  admins  Admin[]
  payroll Payroll[]
}
model About {
  id        String   @id @default(uuid())
  content   String
  updatedAt DateTime @updatedAt
  updatedBy String?  @map("updated_by")
}

model Payroll {
  id            String         @id @default(uuid())
  userId        String
  title         String         @db.Text
  partyId       String?
  position      Int?
  isPublished   Boolean        @default(false)
  attachments   Attachment[]
  adminPayrolls AdminPayroll[]
  school        School?        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model AdminPayroll {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  payrollId   String?
  adminId     String?
  position    Int?
  isPaid      Boolean      @default(false)
  attachments Attachment[]
  payroll     Payroll?     @relation(fields: [payrollId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, payrollId, adminId])
  @@index([payrollId, adminId, userId])
}

model Tuition {
  id            String       @id @default(uuid())
  userId        String
  partyId       String?      @db.Text
  username      String?      @db.Text
  courseId      String?
  amount        String?
  transactionId String?
  status        String?
  course        Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attachments   Attachment[]
  isActive      Boolean      @default(true)
  isPaid        Boolean      @default(false)

  transId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model Content {
  id          String   @id @default(uuid())
  courseId    String
  userId      String
  isCompleted Boolean  @default(false)
  title       String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseNoticeboard {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comments    Comment[]

  @@index([courseId])
}

model Coursework {
  id           String         @id @default(uuid())
  title        String
  userId       String
  description  String?        @db.Text
  position     Int?
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  publishDate  DateTime?
  attachments  Attachment[]
  userProgress UserProgress[]
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String?

  @@index([courseId])
}

model Admin {
  id           String        @id @default(uuid())
  userId       String
  title        String        @db.Text
  description  String?       @db.Text
  position     Int?
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  imageUrl     String?
  schoolId     String?
  school       School?       @relation(fields: [schoolId], references: [id])
  courses      Course[]
  noticeboards Noticeboard[]
  attachments  Attachment[]

  @@index([schoolId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  userId             String?
  description        String?             @db.Text
  imageUrl           String?             @db.Text
  amount             String?             @db.Text
  attachments        Attachment[]
  tuitions           Tuition[]
  courseNoticeboards CourseNoticeboard[]
  tutors             Tutor[]
  userProgress       UserProgress[]
  courseworks        Coursework[]
  enrollments        Enrollment[]
  contents           Content[]
  admin              Admin?              @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId            String?
  position           Int?
  isPublished        Boolean             @default(false)
  publishDate        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([adminId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Tutor {
  id           String         @id @default(uuid())
  userId       String?
  title        String         @db.Text
  description  String?        @db.Text
  objective    String?        @db.Text
  videoUrl     String?        @db.Text
  position     Int            @default(0)
  attachments  Attachment[]
  userProgress UserProgress[]
  assignments  Assignment[]
  isCompleted  Boolean        @default(false)
  playbackId   String?        @unique
  isPublished  Boolean        @default(false)
  isFree       Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courseId     String?
  muxDataId    String?        @unique
  adminId      String?
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?       @relation(fields: [muxDataId], references: [id], onDelete: Cascade) // Keep onDelete here

  @@index([courseId])
}

model Assignment {
  id           String         @id @default(uuid())
  title        String
  userId       String?
  description  String?        @db.Text
  attachments  Attachment[]
  userProgress UserProgress[]
  tutor        Tutor?         @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId      String?
  position     Int?
  isPublished  Boolean        @default(false)
  publishDate  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([tutorId])
}

model MuxData {
  id         String   @id @default(uuid())
  tutorId    String?  @unique
  assetId    String
  playbackId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tutor      Tutor?   @relation
}

model Attachment {
  id                  String             @id @default(uuid())
  url                 String             @db.Text
  adminId             String?
  admin               Admin?             @relation(fields: [adminId], references: [id], onDelete: Cascade)
  courseId            String?
  course              Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  noticeboard         Noticeboard?       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  noticeboardId       String?
  coursework          Coursework?        @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId        String?
  courseNoticeboard   CourseNoticeboard? @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  courseNoticeboardId String?
  tutor               Tutor?             @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId             String?
  tuition             Tuition?           @relation(fields: [tuitionId], references: [id], onDelete: Cascade)
  tuitionId           String?
  assignment          Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId        String?
  payrolls            Payroll?           @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId           String?
  adminPayroll        AdminPayroll?      @relation(fields: [adminPayrollId], references: [id], onDelete: Cascade)
  adminPayrollId      String?

  @@index([adminId, courseId, courseworkId, noticeboardId, courseNoticeboardId, payrollId, tuitionId, tutorId])
}

model UserProgress {
  id           String      @id @default(uuid())
  userId       String
  tutors       Tutor?      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId      String?
  courseworks  Coursework? @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId String?
  courses      Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  assignments  Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String?
  isEnrolled   Boolean     @default(false)
  isCompleted  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([userId, tutorId])
  @@unique([userId, courseworkId])
  @@unique([userId, courseId])
  @@unique([userId, assignmentId])
  @@index([courseId, courseworkId, tutorId, assignmentId])
}

model Noticeboard {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?      @db.Text
  adminId     String?
  admin       Admin?       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  position    Int?
  attachments Attachment[]
  comments    Comment[]
  isPublished Boolean      @default(false)
  publishDate DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([adminId])
}

model Comment {
  id                  String            @id @default(uuid())
  noticeboardId       String
  noticeboard         Noticeboard       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  courseNoticeboardId String
  courseNoticeboard   CourseNoticeboard @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  userId              String
  content             String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

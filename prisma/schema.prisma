generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id
  role         String? // e.g., "admin" or "student"
  enrollment   Enrollment[]
  tuitions     Tuition[]
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Admin {
  id          String       @id @default(uuid())
  userId      String
  faculty     Faculty?     @relation(fields: [facultyId], references: [id])
  facultyId   String?
  courseworks Coursework[]
  // ... other fields
}

model School {
  id        String    @id @default(uuid())
  name      String    @unique
  faculties Faculty[]
  payroll   Payroll[]
}

model Enrollment {
  id        String   @id @default(uuid())
  name      String // Description or title of the enrollment
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String // Links to the enrolled user (student)
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String // Links to the course
  faculty   Faculty? @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId String? // Optional faculty link
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  @@index([courseId])
}

model Payroll {
  id              String           @id @default(uuid())
  userId          String
  title           String           @db.Text
  partyId         String?
  position        Int?
  isPublished     Boolean          @default(false)
  attachments     Attachment[]
  facultyPayrolls FacultyPayroll[]
  school          School?          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model FacultyPayroll {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  payrollId   String?
  facultyId   String?
  position    Int?
  isPaid      Boolean      @default(false)
  attachments Attachment[]
  payroll     Payroll?     @relation(fields: [payrollId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, payrollId, facultyId])
  @@index([payrollId, facultyId, userId])
}

model Tuition {
  id          String       @id @default(uuid())
  userId      String
  partyId     String?      @db.Text
  username    String?      @db.Text
  courseId    String?
  amount      String?
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive    Boolean      @default(true)
  isPaid      Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseNoticeboard {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  partyId     String?      @db.Text
  courseId    String?
  description String?      @db.Text
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Assignment {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.Text
  objective    String?        @db.Text
  description  String?        @db.Text
  courseId     String?
  position     Int?
  attachments  Attachment[]
  userProgress UserProgress[]
  isCompleted  Boolean        @default(false)
  isPublished  Boolean        @default(false)
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Coursework {
  id           String                        @id @default(uuid())
  title        String
  userId       String
  description  String?                       @db.Text
  facultyId    String?
  courseId     String?
  position     Int?
  isPublished  Boolean                       @default(false)
  createdBy    String? // Changed from @db.Uuid
  faculty      Faculty?                      @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  submissions  StudentCourseworkSubmission[]
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  publishDate  DateTime?
  attachments  Attachment[]
  userProgress UserProgress[]
  Submission   Submission[]
  admins       Admin[]
  Course       Course?                       @relation(fields: [courseId], references: [id])

  @@index([isPublished, facultyId, createdBy])
}

model StudentCourseworkSubmission {
  id           String     @id @default(uuid())
  courseworkId String
  studentId    String
  title        String
  abstract     String     @default("") // Stores HTML or plain text
  description  String     @default("")
  coursework   Coursework @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([courseworkId, studentId])
}

model Submission {
  id           String    @id @default(uuid())
  courseworkId String
  studentId    String
  submittedAt  DateTime? @default(now())
  status       String    @default("Not Submitted")
  grade        Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  coursework Coursework @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([courseworkId, studentId])
}

model Faculty {
  id           String         @id @default(uuid())
  userId       String? // Optional if not all faculties have a userId
  title        String
  description  String?        @db.Text
  position     Int?
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  imageUrl     String?
  schoolId     String?
  createdBy    String?        @db.Text
  school       School?        @relation(fields: [schoolId], references: [id])
  courses      Course[]
  courseworks  Coursework[]
  noticeboards Noticeboard[]
  attachments  Attachment[]
  students     Student[]
  enrollments  Enrollment[]
  userProgress UserProgress[]
  admins       Admin[]

  @@index([schoolId])
}

model Student {
  id        String   @id @default(uuid())
  userId    String   @unique // Links to Clerk's userId or similar
  name      String?
  username  String?
  email     String?  @unique
  facultyId String? // Optional relation to Faculty, nullable if not always assigned
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional relation to Faculty (if applicable)
  faculty     Faculty?     @relation(fields: [facultyId], references: [id])
  submissions Submission[]
  enrollments Enrollment[]

  @@index([facultyId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  userId             String?
  description        String?             @db.Text
  imageUrl           String?             @db.Text
  amount             String?             @db.Text
  attachments        Attachment[]
  tuitions           Tuition[]
  courseNoticeboards CourseNoticeboard[]
  assignments        Assignment[]
  tutors             Tutor[]
  enrollments        Enrollment[]
  userProgress       UserProgress[]
  courseworks        Coursework[]
  facultyId          String?
  faculty            Faculty?            @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position           Int?
  isPublished        Boolean             @default(false)
  publishDate        DateTime? // Added for scheduled publishing
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([facultyId])
}

model Tutor {
  id           String         @id @default(uuid())
  userId       String?
  title        String?        @db.Text
  description  String?        @db.Text
  objective    String?        @db.Text
  // videoUrl     String?        @db.Text
  position     Int            @default(0)
  attachments  Attachment[]
  userProgress UserProgress[]
  playbackId   String?        @unique
  isPublished  Boolean        @default(false)
  isFree       Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courseId     String?
  muxDataId    String?        @unique // Foreign key to MuxData
  facultyId    String? // Foreign key to faculty
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?       @relation(fields: [muxDataId], references: [id], onDelete: Cascade) // Keep onDelete here

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  tutorId    String?  @unique // Complementary field, references Tutor.id
  assetId    String
  playbackId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tutor      Tutor?   @relation // Removed onDelete: Cascade

  // Removed incorrect tutors Tutor[]
}

model Attachment {
  id                  String             @id @default(uuid())
  name                String
  url                 String             @db.Text
  facultyId           String?
  faculty             Faculty?           @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  courseId            String?
  course              Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Noticeboard         Noticeboard?       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  noticeboardId       String?
  Coursework          Coursework?        @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId        String?
  Assignment          Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId        String?
  CourseNoticeboard   CourseNoticeboard? @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  courseNoticeboardId String?
  tutor               Tutor?             @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId             String?
  tuition             Tuition?           @relation(fields: [tuitionId], references: [id], onDelete: Cascade)
  tuitionId           String?
  Payroll             Payroll?           @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId           String?
  FacultyPayroll      FacultyPayroll?    @relation(fields: [facultyPayrollId], references: [id], onDelete: Cascade)
  facultyPayrollId    String?

  @@index([facultyId, courseId, courseworkId, noticeboardId, courseNoticeboardId, assignmentId, payrollId, tuitionId, tutorId])
}

model UserProgress {
  id           String     @id @default(uuid())
  userId       String
  tutors       Tutor      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId      String
  assignments  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  courseworks  Coursework @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId String
  courses      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  isCompleted  Boolean    @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  faculties Faculty[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // courses   Course[]

  @@unique([userId, tutorId])
  @@unique([userId, assignmentId])
  @@unique([userId, courseworkId])
  @@index([tutorId, assignmentId, courseworkId])
}

model Noticeboard {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?      @db.Text
  facultyId   String?
  faculty     Faculty?     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position    Int?
  attachments Attachment[]
  comments    Comment[]
  isPublished Boolean      @default(false)
  publishDate DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([facultyId])
}

model Comment {
  id            String      @id @default(uuid())
  noticeboardId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  noticeboard   Noticeboard @relation(fields: [noticeboardId], references: [id])
}

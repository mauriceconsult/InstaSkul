generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String    @id @default(uuid())
  name      String    @unique
  faculties Faculty[]
  payroll   Payroll[]
}

model Payroll {
  id              String           @id @default(uuid())
  userId          String
  title           String           @db.Text
  partyId         String?
  position        Int?
  isPublished          Boolean          @default(false)
  attachments     Attachment[]
  facultyPayrolls FacultyPayroll[]
  schoolId        String?
  school          School?          @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model FacultyPayroll {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.Text
  partyId      String?
  userProgress UserProgress[]
  attachments  Attachment[]
  position     Int?
  isPaid       Boolean        @default(false)

  payrollId String?
  payroll   Payroll? @relation(fields: [payrollId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([payrollId])
}

model Tuition {
  id             String          @id @default(uuid())
  userId         String
  title          String          @db.Text
  partyId        String?
  position       Int?
  isPaid         Boolean         @default(false)
  attachments    Attachment[]
  courseTuitions CourseTuition[]
  courseId       String?
  course         Course?         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model CourseTuition {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.Text
  abstract     String?        @db.Text
  description  String?        @db.Text
  courseId     String?
  position     Int?
  tuitionId    String?
  tuition      Tuition?       @relation(fields: [tuitionId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  attachments  Attachment[]
  isSubmitted  Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tuitionId])
}

model CourseNoticeboard {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  partyId     String?      @db.Text
  courseId    String?
  description String?      @db.Text
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Assignment {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  objective   String? @db.Text
  description String? @db.Text
  partyId     String?
  courseId    String?
  position    Int?

  attachments      Attachment[]
  tutorAssignments TutorAssignment[]
  isPublished      Boolean           @default(false)
  course           Course?           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model TutorAssignment {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.Text
  objective    String?        @db.Text
  description  String?        @db.Text
  position     Int?
  assignmentId String?
  userProgress UserProgress[]
  assignment   Assignment?    @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  isSubmitted Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignmentId])
}

model Coursework {
  id              String           @id @default(uuid())
  title           String
  userId          String
  description     String?          @db.Text
  facultyId       String?
  faculty         Faculty?         @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position        Int?
  attachments     Attachment[]
  isPublished     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studentProjects StudentProject[]

  @@index([facultyId])
}

model StudentProject {
  id           String         @id @default(uuid())
  userId       String
  title        String         @db.Text
  abstract     String?        @db.Text
  description  String?        @db.Text
  courseId     String?
  position     Int?
  userProgress UserProgress[]
  attachments  Attachment[]
  isSubmitted  Boolean        @default(false)
  courseworkId String?
  coursework   Coursework?    @relation(fields: [courseworkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseworkId])
}

model Faculty {
  id           String        @id @default(uuid())
  userId       String
  title        String        @db.Text
  description  String?       @db.Text
  imageUrl     String?       @db.Text
  schoolId     String?
  school       School?       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  courses      Course[]
  attachments  Attachment[]
  noticeboards Noticeboard[]
  courseworks  Coursework[]
  position     Int?
  isPublished  Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  userId             String
  description        String?             @db.Text
  imageUrl           String?             @db.Text
  amount             String?             @db.Text
  attachments        Attachment[]
  tuitions           Tuition[]
  tutors             Tutor[]
  purchases          Purchase[]
  courseNoticeboards CourseNoticeboard[]
  assignments        Assignment[]
  facultyId          String?
  faculty            Faculty?            @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position           Int?
  isPublished        Boolean             @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([facultyId])
}

model Tutor {
  id              String         @id @default(uuid())
  userId          String
  title           String         @db.Text
  description     String?        @db.Text
  objective       String?        @db.Text
  topicAssignment String?        @db.Text
  videoUrl        String?        @db.Text
  position        Int?
  attachments     Attachment[]
  userProgress    UserProgress[]
  isPublished     Boolean        @default(false)
  isFree          Boolean?       @default(false)
  courseId        String?
  course          Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData         MuxData?
  muxDataId       String?        @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  tutorId    String   @unique
  tutor      Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  playbackId String?
  assetId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserProgress {
  id      String @id @default(uuid())
  userId  String
  tutors  Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId String

  courseTuitions    CourseTuition   @relation(fields: [courseTuitionId], references: [id], onDelete: Cascade)
  courseTuitionId   String
  studentProjectId  String
  studentProjects   StudentProject  @relation(fields: [studentProjectId], references: [id], onDelete: Cascade)
  tutorAssignmentId String
  tutorAssignments  TutorAssignment @relation(fields: [tutorAssignmentId], references: [id], onDelete: Cascade)
  facultyPayrollId  String
  facultyPayrolls   FacultyPayroll  @relation(fields: [facultyPayrollId], references: [id], onDelete: Cascade)
  isCompleted       Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, tutorId])
  @@index([tutorId])
}

model Attachment {
  id                  String             @id @default(uuid())
  name                String
  url                 String             @db.Text
  facultyId           String?
  faculty             Faculty?           @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  courseId            String?
  course              Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Noticeboard         Noticeboard?       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  noticeboardId       String?
  Coursework          Coursework?        @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId        String?
  Assignment          Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId        String?
  CourseNoticeboard   CourseNoticeboard? @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  courseNoticeboardId String?
  studentProject      StudentProject?    @relation(fields: [studentProjectId], references: [id])
  studentProjectId    String?
  tutorAssignment     TutorAssignment?   @relation(fields: [tutorAssignmentId], references: [id])
  tutorAssignmentId   String?
  tutor               Tutor?             @relation(fields: [tutorId], references: [id])
  tutorId             String?
  tuition             Tuition?           @relation(fields: [tuitionId], references: [id])
  tuitionId           String?
  courseTuition       CourseTuition?     @relation(fields: [courseTuitionId], references: [id])
  courseTuitionId     String?
  facultyPayroll      FacultyPayroll?    @relation(fields: [facultyPayrollId], references: [id])
  facultyPayrollId    String?
  Payroll             Payroll?           @relation(fields: [payrollId], references: [id])
  payrollId           String?

  @@index([facultyId])
}

model Noticeboard {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?      @db.Text
  facultyId   String?
  faculty     Faculty?     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([facultyId])
}

model Purchase {
  id       String  @id @default(cuid())
  userId   String
  partyId  String  @unique @db.Text
  courseId String?
  courses  Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

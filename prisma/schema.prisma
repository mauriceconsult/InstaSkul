generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String       @id @default(uuid())
  name        String       @unique
  faculties   Faculty[]
  attachments Attachment[]
  payroll     Payroll[]
}

model Payroll {
  id       String  @id @default(uuid())
  userId   String
  title    String  @db.Text
  partyId  String?
  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Tuition {
  id       String  @id @default(uuid())
  userId   String
  title    String  @db.Text
  partyId  String?
  courseId String?
  position Int?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model CourseNoticeboard {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  partyId     String?
  courseId    String?
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Assignment {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  objective   String?      @db.Text
  description String?      @db.Text
  partyId     String?
  courseId    String?
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Faculty {
  id           String        @id @default(uuid())
  userId       String
  title        String        @db.Text
  description  String?       @db.Text
  imageUrl     String?       @db.Text
  schoolId     String?
  school       School?       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  courses      Course[]
  attachments  Attachment[]
  noticeboards Noticeboard[]
  courseworks  Coursework[]
  position     Int?
  isPublished  Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  userId             String
  description        String?             @db.Text
  imageUrl           String?             @db.Text
  amount             String?             @db.Text
  attachments        Attachment[]
  tutors             Tutor[]
  purchases          Purchase[]
  courseNoticeboards CourseNoticeboard[]
  assignments        Assignment[]
  facultyId          String?
  faculty            Faculty?            @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position           Int?
  isPublished        Boolean             @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Tuition   Tuition[]

  @@index([facultyId])
}

model Tutor {
  id              String         @id @default(uuid())
  userId          String
  title           String         @db.Text
  description     String?        @db.Text
  objective       String?        @db.Text
  topicAssignment String?        @db.Text
  videoUrl        String?        @db.Text
  position        Int?
  userProgress    UserProgress[]
  isPublished     Boolean        @default(false)
  isFree          Boolean?       @default(false)
  courseId        String?
  course          Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData         MuxData?
  muxDataId       String?        @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  tutorId    String   @unique
  tutor      Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  playbackId String?
  assetId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  tutorId     String
  tutors      Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, tutorId])
  @@index([tutorId])
}

model Attachment {
  id                  String             @id @default(uuid())
  name                String
  url                 String             @db.Text
  schoolId            String?
  school              School?            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  facultyId           String?
  faculty             Faculty?           @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  courseId            String?
  course              Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Noticeboard         Noticeboard?       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  noticeboardId       String?
  Coursework          Coursework?        @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  courseworkId        String?
  Assignment          Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId        String?
  CourseNoticeboard   CourseNoticeboard? @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  courseNoticeboardId String?

  @@index([facultyId])
}

model Noticeboard {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?      @db.Text
  facultyId   String?
  faculty     Faculty?     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([facultyId])
}

model Coursework {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?      @db.Text
  facultyId   String?
  faculty     Faculty?     @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  position    Int?
  attachments Attachment[]
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([facultyId])
}

model Purchase {
  id       String  @id @default(cuid())
  userId   String
  partyId  String  @unique @db.Text
  courseId String?
  courses  Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

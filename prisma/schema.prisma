generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id      String    @id @default(uuid())
  name    String    @unique
  admins  Admin[]
  payroll Payroll[]
}

model Payroll {
  id            String         @id @default(uuid())
  userId        String
  title         String
  partyId       String?
  position      Int?
  isPublished   Boolean        @default(false)
  schoolId      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  adminPayrolls AdminPayroll[]
  attachments   Attachment[]
  school        School?        @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model AdminPayroll {
  id          String       @id @default(uuid())
  userId      String
  title       String
  payrollId   String?
  position    Int?
  isPaid      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  adminId     String?
  payroll     Payroll?     @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@unique([userId, payrollId, adminId])
  @@index([payrollId, adminId, userId])
}

model Tuition {
  id             String       @id @default(uuid())
  userId         String
  partyId        String?
  username       String?
  courseId       String?
  amount         String?
  isActive       Boolean      @default(true)
  isPaid         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  status         String?
  transId        String?
  transactionId  String?
  enrolleeUserId String?
  attachments    Attachment[]
  enrollment     Enrollment?  @relation("TuitionToEnrollment")
  course         Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model Content {
  id          String   @id @default(uuid())
  courseId    String
  userId      String
  isCompleted Boolean  @default(false)
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
}

model CourseNoticeboard {
  id          String       @id @default(uuid())
  userId      String
  title       String
  courseId    String?
  description String?
  position    Int?
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseNoticeboardComments CourseNoticeboardComment[]
  attachments Attachment[]
  
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Coursework {
  id           String         @id @default(uuid())
  title        String
  userId       String
  description  String?
  position     Int?
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courseId     String?
  publishDate  DateTime?
  attachments  Attachment[]
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseworkSubmissions CourseworkSubmission[]
  userProgress UserProgress[]

  @@index([courseId])
}

model Admin {
  id           String        @id @default(uuid())
  userId       String
  title        String
  description  String?
  position     Int?
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  imageUrl     String?
  schoolId     String?
  school       School?       @relation(fields: [schoolId], references: [id])
  attachments  Attachment[]
  courses      Course[]
  noticeboards Noticeboard[]

  @@index([schoolId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  userId             String?
  description        String?
  imageUrl           String?
  amount             String?
  position           Int?
  isPublished        Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  publishDate        DateTime?
  adminId            String?
  attachments        Attachment[]
  contents           Content[]
  admin              Admin?              @relation(fields: [adminId], references: [id], onDelete: Cascade)
  courseNoticeboards CourseNoticeboard[]
  courseworks        Coursework[]
  enrollments        Enrollment[]
  tuitions           Tuition[]
  tutors             Tutor[]
  userProgress       UserProgress[]

  @@index([adminId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tuitionId String   @unique
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tuition   Tuition  @relation("TuitionToEnrollment", fields: [tuitionId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Tutor {
  id           String         @id @default(uuid())
  userId       String?
  title        String
  description  String?
  objective    String?
  videoUrl     String?
  position     Int            @default(0)
  isPublished  Boolean        @default(false)
  isFree       Boolean?       @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courseId     String?
  muxDataId    String?        @unique
  playbackId   String?        @unique
  adminId      String?
  isCompleted  Boolean        @default(false)
  assignments  Assignment[]
  attachments  Attachment[]
  course       Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?       @relation(fields: [muxDataId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model Assignment {
  id           String         @id @default(uuid())
  userId       String?
  title        String
  description  String?
  position     Int?
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tutorId      String?
  publishDate  DateTime?
  tutor        Tutor?         @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  assignmentSubmissions AssignmentSubmission[]
  attachments  Attachment[]
  userProgress UserProgress[]

  @@index([tutorId])
}

model MuxData {
  id         String   @id @default(uuid())
  tutorId    String?  @unique
  assetId    String
  playbackId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tutor      Tutor?
}

model Attachment {
  id                  String             @id @default(uuid())
  url                 String
  courseId            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  noticeboardId       String?
  courseworkId        String?
  assignmentId        String?
  courseNoticeboardId String?
  tutorId             String?
  tuitionId           String?
  payrollId           String?
  adminId             String?
  adminPayrollId      String?
  admin               Admin?             @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminPayroll        AdminPayroll?      @relation(fields: [adminPayrollId], references: [id], onDelete: Cascade)
  assignment          Assignment?        @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  course              Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseNoticeboard   CourseNoticeboard? @relation(fields: [courseNoticeboardId], references: [id], onDelete: Cascade)
  coursework          Coursework?        @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  noticeboard         Noticeboard?       @relation(fields: [noticeboardId], references: [id], onDelete: Cascade)
  payrolls            Payroll?           @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  tuition             Tuition?           @relation(fields: [tuitionId], references: [id], onDelete: Cascade)
  tutor               Tutor?             @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@index([adminId, courseId, courseworkId, noticeboardId, courseNoticeboardId, payrollId, tuitionId, tutorId])
}

model UserProgress {
  id           String      @id @default(uuid())
  userId       String
  tutorId      String?
  assignmentId String?
  courseworkId String?
  isCompleted  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  courseId     String?
  isEnrolled   Boolean     @default(false)
  assignments  Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  courses      Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseworks  Coursework? @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  tutors       Tutor?      @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorId])
  @@unique([userId, courseworkId])
  @@unique([userId, courseId])
  @@unique([userId, assignmentId])
  @@index([courseId, courseworkId, tutorId, assignmentId])
}

model Noticeboard {
  id          String       @id @default(uuid())
  title       String
  userId      String
  description String?
  position    Int?
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  publishDate DateTime?
  adminId     String?
  attachments Attachment[]
  noticeboardComments NoticeboardComment[]
  admin       Admin?       @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
}

model NoticeboardComment {
  id             String    @id @default(cuid())
  noticeboardId  String
  userId         String
  content        String
  createdAt      DateTime  @default(now())
  parentId       String?   // for replies

  noticeboard    Noticeboard @relation(fields: [noticeboardId], references: [id])  
  parent         NoticeboardComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies        NoticeboardComment[] @relation("CommentReplies")

  @@index([noticeboardId])
  @@index([userId])
  @@index([parentId])
}

model CourseNoticeboardComment {
  id                    String    @id @default(cuid())
  courseNoticeboardId   String
  userId                String
  content               String
  createdAt             DateTime  @default(now())
  parentId              String?
  courseNoticeboard     CourseNoticeboard @relation(fields: [courseNoticeboardId], references: [id])
  parent                CourseNoticeboardComment? @relation("CourseCommentReplies", fields: [parentId], references: [id])
  replies               CourseNoticeboardComment[] @relation("CourseCommentReplies")

  @@index([courseNoticeboardId])
  @@index([userId])
  @@index([parentId])
}
model AssignmentSubmission {
  id           String    @id @default(cuid())
  assignmentId String
  userId       String
  fileUrl      String?
  text         String?
  submittedAt  DateTime  @default(now())
  isGraded     Boolean   @default(false)
  grade        Float?
  feedback     String?
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([userId])
  @@unique([assignmentId, userId])
}

model CourseworkSubmission {
  id           String    @id @default(cuid())
  courseworkId String
  userId       String
  fileUrl      String?
  text         String?
  submittedAt  DateTime  @default(now())
  isGraded     Boolean   @default(false)
  grade        Float?
  feedback     String?

  coursework   Coursework @relation(fields: [courseworkId], references: [id], onDelete: Cascade)
  

  @@index([courseworkId])
  @@index([userId])
  @@unique([courseworkId, userId])
}
